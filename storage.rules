rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Allow users to upload and read their own profile pictures
    match /profilePics/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to upload and read stories
    match /stories/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to upload, read, and delete their own videos
    match /videos/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.contentType.matches('video/.*') &&
                   request.resource.size < 100 * 1024 * 1024; // 100MB limit for 3-minute videos
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to upload and read video thumbnails
    match /thumbnails/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.contentType.matches('image/.*') &&
                   request.resource.size < 5 * 1024 * 1024; // 5MB limit for thumbnails
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to upload and delete temporary video files
    match /videos/{userId}/temp/{fileName} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.contentType.matches('video/.*') &&
                   request.resource.size < 100 * 1024 * 1024;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to upload edited videos
    match /videos/{userId}/edited/{fileName} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.contentType.matches('video/.*') &&
                   request.resource.size < 100 * 1024 * 1024;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for Marketplace Product Media
    match /products/{userId}/{fileName} {
      // Allow public reads for marketplace items
      allow read: if true;
      // Allow create only by the authenticated user matching the userId path segment
      // Check for reasonable size (10MB) and image/video content types
      allow create: if request.auth != null 
                     && request.auth.uid == userId
                     && request.resource.size < 10 * 1024 * 1024
                     && (request.resource.contentType.matches('image/.*') || request.resource.contentType.matches('video/.*'));
      // Allow delete only by the user who uploaded it
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for Side Room Thumbnails
    match /sideRoomThumbnails/{roomId}/{fileName} {
      // Allow anyone to read thumbnails (adjust if needed)
      allow read: if true;
      // Allow authenticated users to upload (create/update) thumbnails
      allow write: if request.auth != null;
      // Optional: Add size and content type validation
      // allow write: if request.auth != null &&
      //               request.resource.size < 2 * 1024 * 1024 && // 2MB limit
      //               request.resource.contentType.matches('image/.*');
    }

    // Default deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
