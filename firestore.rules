rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMember(userId) {
      return request.auth.uid in resource.data.members;
    }
    
    function isRoomMember(roomId) {
      return exists(/databases/$(database)/documents/sideRooms/$(roomId)/participants/$(request.auth.uid));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
    }

    // Comments collection
    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
    }

    // Side Rooms collection
    match /sideRooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        isRoomMember(roomId)
      );
      allow delete: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;

      // Room participants subcollection
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/sideRooms/$(roomId)).data.ownerId == request.auth.uid
        );
      }

      // Room messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isRoomMember(roomId);
        allow create: if isAuthenticated() && isRoomMember(roomId);
        allow update: if isAuthenticated() && 
          resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && (
          resource.data.authorId == request.auth.uid ||
          get(/databases/$(database)/documents/sideRooms/$(roomId)).data.ownerId == request.auth.uid
        );
      }

      // WebRTC signaling subcollection
      match /signaling/{signalId} {
        allow read, write: if isAuthenticated() && isRoomMember(roomId);
      }
    }

    // Trending topics collection
    match /trendingTopics/{topicId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only updated by cloud functions
    }
  }
}