rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ======================
    // Enhanced Helper Functions
    // ======================
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDocumentMember(docRef) {
      let docData = get(docRef).data;
      return request.auth.uid in docData.members || 
             (docData.members is list && docData.members.hasAny([request.auth.uid]));
    }

      function hasValidDeviceId() {
      return 'deviceId' in request.resource.data && 
             request.resource.data.deviceId is string &&
             request.resource.data.deviceId.size() > 0;
    }

    function isRegisteredDevice(userId, deviceId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return deviceId in userDoc.data.registeredDevices ||
             (userDoc.data.registeredDevices is list && 
              userDoc.data.registeredDevices.hasAny([deviceId]));
    }


    function isValidTimeValue(timeVal) {
      return timeVal is timestamp && 
             timeVal <= request.time && 
             timeVal >= timestamp.date(2000, 1, 1);
    }

    function isNotDeleted() {
      return !('deleted' in resource.data) || 
             (resource.data.deleted is bool && !resource.data.deleted);
    }

    function isFollowing(targetUserId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return targetUserId in userDoc.data.following || 
             (userDoc.data.following is list && userDoc.data.following.hasAny([targetUserId]));
    }

    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isValidProfileUpdate() {
      let allowedFields = ['name', 'profilePic', 'bio', 'settings', 'lastUpdated'];
      let isVerificationUpdate = request.resource.data.isVerified != resource.data.isVerified;
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields) &&
             (!isVerificationUpdate || isAdmin()) &&
             isValidTimeValue(request.resource.data.lastUpdated);
    }

    function isValidSessionUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['sessions']) &&
             request.resource.data.sessions is map &&
             request.resource.data.sessions.verifications is list;
    }

    match /passcodeVerifications/{verificationId} {
      allow create: if isAuthenticated() &&
                    hasValidDeviceId() &&
                    isRegisteredDevice(request.auth.uid, request.resource.data.deviceId) &&
                    'passcodeHash' in request.resource.data &&
                    request.resource.data.passcodeHash is string;
      
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      
      allow delete: if isAdmin();
    }

    // ======================
    // Core Collections
    // ======================

    // Users Collection
    match /users/{userId} {
      allow get: if isAuthenticated();
      allow list: if isAdmin();

      allow create: if isUser(userId) &&
                    request.resource.data.keys().hasAll([
                      'username',
                      'email',
                      'sourceCodeHash',
                      'sourceCodeSetupComplete'
                    ]) &&
                    request.resource.data.sourceCodeHash is string &&
                    request.resource.data.sourceCodeHash.size() >= 8 &&
                    request.resource.data.sourceCodeSetupComplete is bool;

      allow update: if isUser(userId) && (
        // Source code setup
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'sourceCodeHash',
          'sourceCodeSetupComplete',
          'lastUpdated'
        ]) &&
        !resource.data.sourceCodeSetupComplete &&
        request.resource.data.sourceCodeSetupComplete == true) ||
        // Profile updates
        isValidProfileUpdate() ||
        // Session updates
        isValidSessionUpdate()
      );

      allow delete: if isUser(userId);

      match /security/{document} {
        allow read, write: if isUser(userId);
      }

      match /following/{targetUserId} {
        allow read: if isAuthenticated();
        allow write: if isUser(userId);
      }
      
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == followerId;
      }
    }

    // Posts Collection
    match /posts/{postId} {
      allow read: if isAuthenticated() && isNotDeleted();
      
      allow create: if isAuthenticated() &&
                    request.resource.data.authorId == request.auth.uid &&
                    isValidTimeValue(request.resource.data.timestamp) &&
                    request.resource.data.keys().hasAll([
                      'content',
                      'authorName',
                      'authorAvatar'
                    ]);

      allow update: if isAuthenticated() && (
        (resource.data.authorId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'content',
           'imageUrl',
           'updatedAt'
         ])) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']))
      );

      allow delete: if isAuthenticated() && 
                    (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // Forums Collection
    match /forums/{forumId} {
      allow read: if isAuthenticated() && isNotDeleted();
      allow create: if isAuthenticated() && 
                    request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                    (resource.data.ownerId == request.auth.uid ||
                    isDocumentMember(resource));
      allow delete: if isAuthenticated() && 
                    resource.data.ownerId == request.auth.uid;
    }

    // Side Rooms Collection
    match /sideRooms/{roomId} {
      allow read: if isAuthenticated() && 
                  (!resource.data.isPrivate || isDocumentMember(resource));
      allow create: if isAuthenticated() && 
                    request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                    (resource.data.ownerId == request.auth.uid || 
                    isDocumentMember(resource));
      allow delete: if isAuthenticated() && 
                    resource.data.ownerId == request.auth.uid;
    }

    // ======================
    // Security Collections
    // ======================
    match /sourceCodeVerifications/{verificationId} {
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid;
      
      allow read: if isAdmin() || 
                  (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      allow delete: if isAdmin();
    }

    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if true;
    }

    match /adminOverrides/{overrideId} {
      allow read, write: if isAdmin();
    }
  }
}