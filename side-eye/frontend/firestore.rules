rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ======================
    // Enhanced Helper Functions
    // ======================
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDocumentMember(docRef) {
      let docData = get(docRef).data;
      return request.auth.uid == docData.ownerId || 
             (docData.members is list && docData.members.hasAny([request.auth.uid])) ||
             (docData.members is map && request.auth.uid in docData.members);
    }

    function hasValidDeviceId() {
      return 'deviceId' in request.resource.data && 
             request.resource.data.deviceId is string &&
             request.resource.data.deviceId.size() > 0;
    }

    function isRegisteredDevice(userId, deviceId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return deviceId in userDoc.data.registeredDevices ||
             (userDoc.data.registeredDevices is list && 
              userDoc.data.registeredDevices.hasAny([deviceId]));
    }

    function isValidTimeValue(timeVal) {
      return timeVal is timestamp && 
             timeVal <= request.time && 
             timeVal >= timestamp.date(2000, 1, 1);
    }

    function isNotDeleted() {
      return !('deleted' in resource.data) || 
             (resource.data.deleted is bool && !resource.data.deleted);
    }

    function isFollowing(targetUserId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)/following/$(targetUserId));
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isValidProfileUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['displayName', 'photoURL', 'bio', 'isPrivate']);
    }

    function isValidSessionUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['lastActive', 'deviceInfo']);
    }

    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    // Helper function to check if a user has a private account
    function isPrivateAccount(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.isPrivate == true;
    }

    // Helper function to check if a user is a follower
    function isFollowerOf(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/followers/$(request.auth.uid));
    }

    // Helper function to check if a follow request exists
    function hasFollowRequest(userId, requesterId) {
      return exists(/databases/$(database)/documents/users/$(userId)/followRequests/$(requesterId));
    }

    function isPublicAccount(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.isPrivate == false;
    }

    function isOwnProfile(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Add debug function
    function debug() {
      return request.auth != null 
        ? "Auth ID: " + request.auth.uid + " Time: " + request.time
        : "Unauthenticated";
    }

    // ======================
    // Core Collections
    // ======================

    // Users Collection
    match /users/{userId} {
      // Allow read access to any authenticated user
      allow read: if isAuthenticated();
      
      // Allow create/update access to:
      // 1. The user themselves
      // 2. Admins
      allow create, update: if isAuthenticated() && (
        isUser(userId) ||
        isAdmin()
      );
      
      // Allow delete access only to admins
      allow delete: if isAdmin();
      
      // Subcollections (excluding followers/following which have their own rules)
      match /{subcollection}/{document=**} {
        // Allow read access to any authenticated user
        allow read: if isAuthenticated();
        
        allow create, update: if isAuthenticated() && (
          isUser(userId) ||
          isAdmin()
        );
        
        allow delete: if isAdmin();
      }

      // Followers subcollection
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == followerId;
        allow delete: if isAuthenticated() && request.auth.uid == followerId;
      }

      // Following subcollection
      match /following/{followingId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      // Follow Requests subcollection
      match /followRequests/{requesterId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated() && 
          !isOwnProfile(userId) && 
          isPrivateAccount(userId) && 
          !isFollowerOf(userId) && 
          !hasFollowRequest(userId, request.auth.uid);
        allow delete: if isAuthenticated() && 
          (request.auth.uid == userId || request.auth.uid == requesterId);
      }

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      // Likes subcollection
      match /likes/{likeId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      }

      // Favorites subcollection
      match /favorites/{favoriteId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      }
    }

    // Posts Collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy', 'comments'])
      );
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }

    // Comments Collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Videos Collection
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments'])
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Video Comments Collection
    match /videos/{videoId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Forums Collection
    match /forums/{forumId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.members.hasAny([request.auth.uid])
      );
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Side Rooms Collection
    match /sideRooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.members.hasAny([request.auth.uid]) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isLive', 'liveParticipants', 'activeUsers'])
      );
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;

      // Live sessions subcollection
      match /liveSessions/{sessionId} {
        allow read: if isAuthenticated() && (
          resource.data.roomId == roomId &&
          (resource.data.participants.hasAny([request.auth.uid]) ||
           get(/databases/$(database)/documents/sideRooms/$(roomId)).data.members.hasAny([request.auth.uid]))
        );
        allow create: if isAuthenticated() && 
          request.resource.data.roomId == roomId &&
          get(/databases/$(database)/documents/sideRooms/$(roomId)).data.members.hasAny([request.auth.uid]);
        allow update: if isAuthenticated() && 
          resource.data.roomId == roomId &&
          (resource.data.participants.hasAny([request.auth.uid]) ||
           get(/databases/$(database)/documents/sideRooms/$(roomId)).data.members.hasAny([request.auth.uid]));
        allow delete: if isAuthenticated() && 
          resource.data.roomId == roomId &&
          get(/databases/$(database)/documents/sideRooms/$(roomId)).data.members.hasAny([request.auth.uid]);
      }
    }

    // Stories Collection
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }

    // Story Views Collection
    match /stories/{storyId}/views/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }

    // Search Collection
    match /search/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        isAdmin() ||
        request.resource.data.userId == request.auth.uid
      );
    }

    // ======================
    // Security Collections
    // ======================
    match /passcodeVerifications/{verificationId} {
      allow create: if isAuthenticated() &&
                    'deviceId' in request.resource.data &&
                    request.resource.data.deviceId is string &&
                    request.resource.data.deviceId.size() > 0;
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    match /sourceCodeVerifications/{verificationId} {
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || 
                  (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }

    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if true;
    }

    match /adminOverrides/{overrideId} {
      allow read, write: if isAdmin();
    }

    // Private Account Rules
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        isPublicAccount(userId) || 
        (isPrivateAccount(userId) && (isFollowerOf(userId) || isOwnProfile(userId)))
      );

      // Allow followers to see basic information
      allow read: if isPrivateAccount(userId) && isFollowerOf(userId);
      
      // Allow the owner to see their own profile
      allow read: if isOwnProfile(userId);
      
      // Allow others to send follow requests
      allow create: if isAuthenticated() && !isFollowerOf(userId) && !hasFollowRequest(userId, request.auth.uid);
    }
  }
}
