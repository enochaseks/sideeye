rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ======================
    // Enhanced Helper Functions
    // ======================
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDocumentMember(docRef) {
      let docData = get(docRef).data;
      return request.auth.uid in docData.members || 
             (docData.members is list && docData.members.hasAny([request.auth.uid]));
    }

    function hasValidDeviceId() {
      return 'deviceId' in request.resource.data && 
             request.resource.data.deviceId is string &&
             request.resource.data.deviceId.size() > 0;
    }

    function isRegisteredDevice(userId, deviceId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return deviceId in userDoc.data.registeredDevices ||
             (userDoc.data.registeredDevices is list && 
              userDoc.data.registeredDevices.hasAny([deviceId]));
    }

    function isValidTimeValue(timeVal) {
      return timeVal is timestamp && 
             timeVal <= request.time && 
             timeVal >= timestamp.date(2000, 1, 1);
    }

    function isNotDeleted() {
      return !('deleted' in resource.data) || 
             (resource.data.deleted is bool && !resource.data.deleted);
    }

    function isFollowing(targetUserId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return targetUserId in userDoc.data.following || 
             (userDoc.data.following is list && userDoc.data.following.hasAny([targetUserId]));
    }

    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isValidProfileUpdate() {
      let allowedFields = ['name', 'profilePic', 'bio', 'settings', 'lastUpdated'];
      let isVerificationUpdate = request.resource.data.isVerified != resource.data.isVerified;
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields) &&
             (!isVerificationUpdate || isAdmin()) &&
             isValidTimeValue(request.resource.data.lastUpdated);
    }

    function isValidSessionUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['sessions']) &&
             request.resource.data.sessions is map &&
             request.resource.data.sessions.verifications is list;
    }

    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    // ======================
    // Core Collections
    // ======================

    // Users Collection
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;

      // Following subcollection
      match /following/{followingId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                      request.auth.uid == userId && 
                      userExists(followingId) &&
                      followingId != userId;
        allow delete: if isAuthenticated() && 
                      request.auth.uid == userId;
      }

      // Followers subcollection
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                      request.auth.uid == followerId && 
                      userExists(userId) &&
                      followerId != userId;
        allow delete: if isAuthenticated() && 
                      request.auth.uid == followerId;
      }

      // Favorites subcollection
      match /favorites/{videoId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Posts Collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        // Author can update any field
        resource.data.authorId == request.auth.uid ||
        // Any authenticated user can update likes and likedBy fields
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']))
      );
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }

    // Reposts Collection
    match /reposts/{repostId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Comments Collection
    match /posts/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.authorId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }

    // Likes Collection
    match /posts/{postId}/likes/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Forums Collection
    match /forums/{forumId} {
      allow read: if isAuthenticated() && isNotDeleted();
      allow create: if isAuthenticated() && 
                    request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                    (resource.data.ownerId == request.auth.uid ||
                    isDocumentMember(resource));
      allow delete: if isAuthenticated() && 
                    resource.data.ownerId == request.auth.uid;
    }

    // Side Rooms Collection
    match /sideRooms/{roomId} {
      allow read: if isAuthenticated() && 
                  (!resource.data.isPrivate || isDocumentMember(resource));
      allow create: if isAuthenticated() && 
                    request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                    (resource.data.ownerId == request.auth.uid || 
                    isDocumentMember(resource));
      allow delete: if isAuthenticated() && 
                    resource.data.ownerId == request.auth.uid;
    }

    // Videos Collection
    match /videos/{videoId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid ||
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments']));
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // User Likes subcollection
    match /users/{userId}/likes/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // User Favorites subcollection
    match /users/{userId}/favorites/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Video Comments subcollection
    match /videos/{videoId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ======================
    // Security Collections
    // ======================
    match /passcodeVerifications/{verificationId} {
      allow create: if isAuthenticated() &&
                    hasValidDeviceId() &&
                    isRegisteredDevice(request.auth.uid, request.resource.data.deviceId) &&
                    'passcodeHash' in request.resource.data &&
                    request.resource.data.passcodeHash is string;
      
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      
      allow delete: if isAdmin();
    }

    match /sourceCodeVerifications/{verificationId} {
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid;
      
      allow read: if isAdmin() || 
                  (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      allow delete: if isAdmin();
    }

    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if true;
    }

    match /adminOverrides/{overrideId} {
      allow read, write: if isAdmin();
    }

    // Stories collection rules
    match /stories/{storyId} {
      allow read: if isAuthenticated() && (
        // User can read their own stories
        resource.data.authorId == request.auth.uid ||
        // User can read stories from users they follow
        isFollowing(resource.data.authorId) ||
        // User can read stories from public accounts
        get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.isPublic
      );
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.expiresAt is timestamp &&
        request.resource.data.mediaUrl is string &&
        request.resource.data.mediaType in ['image', 'video'];
      allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }

    // Story views collection rules
    match /stories/{storyId}/views/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }
  }
}